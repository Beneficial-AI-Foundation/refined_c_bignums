---
description:
globs: *.v
alwaysApply: false
---

FOLLOW ALL THE RULES IN THIS FILE.
IF NO RULE APPLIES, STOP AND ASK FOR CLARIFICATION INSTEAD OF MAKING CHANGES.
NEVER ADD/CHANGE MORE THAN 2 LINES IN THE SAME COMMIT.
IT'S OK TO DELETE LOTS OF LINES IN ONE COMMIT.
YOU ARE OVERCONFIDENT AND FAVOR INCORRECT BIG ADDITIONS INSTEAD OF INCREMENTAL CORRECT PROGRESS.


# Follow these steps exactly to prove a Coq lemma from scratch

1. Replace `Admitted.` with `Show. Qed.`
2. Run a tool to see if the lemma verifies.
3. If the proof verifies, remove `Show` and run the tool again to check it verifies. Stop.
4. If you get "Attempt to save an incomplete proof", this shows that you have made progress. Go to step 7.
5. Check the list of specific error messages below, and apply any matching fix.
6. If you get some other error, your most recent line must have been incorrect. Remove it.
7. Add exactly one line, just before `Show`, with what you think is the correct next step.
   It is important that `Show` is always just before `Qed`, so you can see what the unsolved goal is.
   You may have to move `Show` inside `-`, `+`, `--`, etc, depending on how nested the first unsolved goal is.
8. Go to step 2.


# Follow these steps exactly to prove a Coq lemma with a half-finished proof

1. Run a tool to see if the lemma verifies.
2. If the proof verifies, remove `Show` and run the tool again to check it verifies. Stop.
3. If you get "Attempt to save an incomplete proof", this shows that the proof so far is correct.
   Go to step 6.
4. Check the list of specific error messages below, and apply any matching fix.
5. If you get some other error, remove ALL lines starting with that one with just `Show. Qed.`
6. Add exactly one line, just before `Show`, with what you think is the correct next step.
   It is important that `Show` is always just before `Qed`, so you can see what the unsolved goal is.
   You may have to move `Show` inside `-`, `+`, `--`, etc, depending on how nested the first unsolved goal is.
7. Go to step 2.

# Specific error messages

If you see:
```
Error: Expected a single focused goal but 0 goals are focused.
```
This means you have proved a subgoal under a bullet point and then tried to keep proving under that bullet point.
Delete exactly the line mentioned in the error message.
If the error persists, repeat the fix. You may have to make several commits, each deleting one line.



If you only see this and no other information:
```
Error:
 (in proof carry_update_preserves_binary): Attempt to save an incomplete proof
(there are remaining open goals).
```
This means you need to add a bullet point to enter a new subgoal.


If you see this
```
Error: [Focus] Wrong bullet -: Current bullet - is not finished.
```
This means try a different bullet type, like + or --

If you see this
```
Error: The variable <lemma name> was not found in the current environment.
```
It's possible you've misremembered the name.
Try searching for it by adding the `Search "<substring>" <type>` tactic,
e.g. `Search "dec" Z.` for decidability lemmas about integers,
or `Search "dec"` for all decidability lemmas.


